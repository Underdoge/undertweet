'use strict';

/**
 * Websocket transport
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('eventemitter3');
var _ = require('lodash');

module.exports = function (_EventEmitter) {
    _inherits(Connection, _EventEmitter);

    function Connection(options) {
        _classCallCheck(this, Connection);

        var _this = _possibleConstructorReturn(this, (Connection.__proto__ || Object.getPrototypeOf(Connection)).call(this));

        _this.options = options || {};

        _this.socket = null;
        _this.connected = false;
        _this.last_socket_error = null;

        _this.encoding = 'utf8';
        _this.incoming_buffer = '';
        return _this;
    }

    _createClass(Connection, [{
        key: 'isConnected',
        value: function isConnected() {
            return this.connected;
        }
    }, {
        key: 'writeLine',
        value: function writeLine(line, cb) {
            this.debugOut('writeLine() socket=' + (this.socket ? 'yes' : 'no') + ' connected=' + this.connected);
            if (this.socket && this.connected) {
                this.socket.send(line, cb);
            }
        }
    }, {
        key: 'debugOut',
        value: function debugOut(out) {
            this.emit('debug', out);
        }
    }, {
        key: 'connect',
        value: function connect() {
            var that = this;
            var options = this.options;
            var socket = null;
            var ws_addr = '';

            this.debugOut('Connection.connect()');

            this.disposeSocket();
            this.requested_disconnect = false;

            // Build the websocket address. eg. ws://ws.rizon.net:8080
            ws_addr += options.tls || options.ssl ? 'wss://' : 'ws://';
            ws_addr += options.host;
            ws_addr += options.port ? ':' + options.port : '';
            ws_addr += options.path ? options.path : '';

            socket = this.socket = new WebSocket(ws_addr); // jshint ignore:line

            socket.onopen = _.bind(function () {
                that.onSocketFullyConnected();
            });
            socket.onclose = function () {
                that.onSocketClose();
            };
            socket.onmessage = function (event) {
                that.onSocketMessage(event.data);
            };
            socket.onopen = function () {
                that.onSocketFullyConnected();
            };
        }

        // Called when the socket is connected and ready to start sending/receiving data.

    }, {
        key: 'onSocketFullyConnected',
        value: function onSocketFullyConnected() {
            this.debugOut('socketFullyConnected()');
            this.connected = true;
            this.emit('open');
        }
    }, {
        key: 'onSocketClose',
        value: function onSocketClose() {
            this.debugOut('socketClose()');
            this.connected = false;
            this.emit('close');
        }
    }, {
        key: 'onSocketMessage',
        value: function onSocketMessage(data) {
            this.debugOut('socketData() ' + JSON.stringify(data));

            var that = this;
            var lines = null;

            this.incoming_buffer += data + '\n';

            lines = this.incoming_buffer.split('\n');
            if (lines[lines.length - 1] !== '') {
                this.incoming_buffer = lines.pop();
            } else {
                lines.pop();
                this.incoming_buffer = '';
            }

            lines.forEach(function (_line) {
                var line = _line.trim();
                that.emit('line', line);
            });
        }
    }, {
        key: 'disposeSocket',
        value: function disposeSocket() {
            this.debugOut('Connection.disposeSocket() connected=' + this.connected);

            if (this.socket && this.connected) {
                this.socket.close();
            }

            if (this.socket) {
                this._unbindEvents();
                this.socket = null;
            }
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.socket && this.connected) {
                this.socket.close();
            }
        }
    }, {
        key: 'setEncoding',
        value: function setEncoding(encoding) {}
    }]);

    return Connection;
}(EventEmitter);