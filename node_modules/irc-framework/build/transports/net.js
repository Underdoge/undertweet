'use strict';

/**
 * TCP / TLS transport
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var net = require('net');
var tls = require('tls');
var util = require('util');
var EventEmitter = require('events').EventEmitter;
var Socks = require('socksjs');
var iconv = require('iconv-lite');

var SOCK_DISCONNECTED = 0;
var SOCK_CONNECTING = 1;
var SOCK_CONNECTED = 2;

module.exports = function (_EventEmitter) {
    _inherits(Connection, _EventEmitter);

    function Connection(options) {
        _classCallCheck(this, Connection);

        var _this = _possibleConstructorReturn(this, (Connection.__proto__ || Object.getPrototypeOf(Connection)).call(this));

        _this.options = options || {};

        _this.socket = null;
        _this.state = SOCK_DISCONNECTED;
        _this.last_socket_error = null;
        _this.socket_events = [];

        _this.encoding = 'utf8';
        _this.incoming_buffer = '';
        return _this;
    }

    _createClass(Connection, [{
        key: 'isConnected',
        value: function isConnected() {
            return this.state === SOCK_CONNECTED;
        }
    }, {
        key: 'writeLine',
        value: function writeLine(line, cb) {
            if (this.socket && this.isConnected()) {
                if (this.encoding !== 'utf8') {
                    this.socket.write(iconv.encode(line + '\n', this.encoding), cb);
                } else {
                    this.socket.write(line + '\n', cb);
                }
            }
        }
    }, {
        key: 'debugOut',
        value: function debugOut(out) {
            this.emit('debug', 'NetTransport ' + out);
        }
    }, {
        key: '_bindEvent',
        value: function _bindEvent(obj, event, fn) {
            obj.on(event, fn);
            var unbindEvent = function unbindEvent() {
                obj.off(event, fn);
            };
            this.socket_events.push(unbindEvent);
            return unbindEvent;
        }
    }, {
        key: '_unbindEvents',
        value: function _unbindEvents() {
            this.socket_events.forEach(function (fn) {
                return fn();
            });
        }
    }, {
        key: 'connect',
        value: function connect() {
            var socket_connect_event_name = 'connect';
            var options = this.options;
            var ircd_host = options.host;
            var ircd_port = options.port || 6667;
            var socket = null;

            this.debugOut('connect()');

            this.disposeSocket();
            this.requested_disconnect = false;

            if (!options.encoding || !this.setEncoding(options.encoding)) {
                this.setEncoding('utf8');
            }

            this.state = SOCK_CONNECTING;
            this.debugOut('Connecting socket..');

            if (options.socks) {
                this.debugOut('Using SOCKS proxy');
                socket = this.socket = Socks.connect({
                    host: ircd_host,
                    port: ircd_port,
                    ssl: options.tls || options.ssl,
                    rejectUnauthorized: options.rejectUnauthorized
                }, {
                    host: options.socks.host,
                    port: options.socks.port || 8080,
                    user: options.socks.user,
                    pass: options.socks.pass,
                    localAddress: options.outgoing_addr
                });
            } else {
                if (options.tls || options.ssl) {
                    socket = this.socket = tls.connect({
                        host: ircd_host,
                        port: ircd_port,
                        rejectUnauthorized: options.rejectUnauthorized,
                        localAddress: options.outgoing_addr
                    });

                    socket_connect_event_name = 'secureConnect';
                } else {
                    socket = this.socket = net.connect({
                        host: ircd_host,
                        port: ircd_port,
                        localAddress: options.outgoing_addr
                    });

                    socket_connect_event_name = 'connect';
                }
            }

            // We need the raw socket connect event.
            // node.js 0.12 no longer has a .socket property.
            this._bindEvent(socket.socket || socket, 'connect', this.onSocketRawConnected.bind(this));
            this._bindEvent(socket, socket_connect_event_name, this.onSocketFullyConnected.bind(this));

            this._bindEvent(socket, 'close', this.onSocketClose.bind(this));
            this._bindEvent(socket, 'error', this.onSocketError.bind(this));
            this._bindEvent(socket, 'data', this.onSocketData.bind(this));
        }

        // Called when the socket is connected and before any TLS handshaking if applicable.
        // This is when it's ideal to read socket pairs for identd.

    }, {
        key: 'onSocketRawConnected',
        value: function onSocketRawConnected() {
            this.debugOut('socketRawConnected()');
            this.state = SOCK_CONNECTED;
            this.emit('extra', 'raw socket connected', this.socket.socket || this.socket);
        }

        // Called when the socket is connected and ready to start sending/receiving data.

    }, {
        key: 'onSocketFullyConnected',
        value: function onSocketFullyConnected() {
            this.debugOut('socketFullyConnected()');
            this.last_socket_error = null;
            this.emit('open');
        }
    }, {
        key: 'onSocketClose',
        value: function onSocketClose() {
            this.debugOut('socketClose()');
            this.state = SOCK_DISCONNECTED;
            this.emit('close', this.last_socket_error ? this.last_socket_error : false);
        }
    }, {
        key: 'onSocketError',
        value: function onSocketError(err) {
            this.debugOut('socketError() ' + err.message);
            this.last_socket_error = err;
            //this.emit('error', err);
        }
    }, {
        key: 'onSocketData',
        value: function onSocketData(data) {
            var _this2 = this;

            this.incoming_buffer += iconv.decode(data, this.encoding);

            var lines = this.incoming_buffer.split('\n');
            if (lines[lines.length - 1] !== '') {
                this.incoming_buffer = lines.pop();
            } else {
                lines.pop();
                this.incoming_buffer = '';
            }

            lines.forEach(function (_line) {
                var line = _line.trim();
                _this2.emit('line', line);
            });
        }
    }, {
        key: 'disposeSocket',
        value: function disposeSocket() {
            this.debugOut('disposeSocket() connected=' + this.isConnected());

            if (this.socket && this.state !== SOCK_DISCONNECTED) {
                this.socket.destroy();
            }

            if (this.socket) {
                this._unbindEvents();
                this.socket = null;
            }
        }
    }, {
        key: 'close',
        value: function close(force) {
            // Cleanly close the socket if we can
            if (this.socket && this.state === SOCK_CONNECTING || force) {
                this.debugOut('close() destroying');
                this.socket.destroy();
            } else if (this.socket && this.state === SOCK_CONNECTED) {
                this.debugOut('close() ending');
                this.socket.end();
            }
        }
    }, {
        key: 'setEncoding',
        value: function setEncoding(encoding) {
            var encoded_test;

            this.debugOut('Connection.setEncoding() encoding=' + encoding);

            try {
                encoded_test = iconv.encode('TEST', encoding);
                // This test is done to check if this encoding also supports
                // the ASCII charset required by the IRC protocols
                // (Avoid the use of base64 or incompatible encodings)
                if (encoded_test == 'TEST') {
                    // jshint ignore:line
                    this.encoding = encoding;
                    return true;
                }
                return false;
            } catch (err) {
                return false;
            }
        }
    }]);

    return Connection;
}(EventEmitter);