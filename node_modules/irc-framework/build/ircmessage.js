'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MessageTags = require('./messagetags');

module.exports = function () {
    function IrcMessage(command) {
        _classCallCheck(this, IrcMessage);

        this.tags = Object.create(null);
        this.prefix = '';
        this.nick = '';
        this.ident = '';
        this.hostname = '';
        this.command = command || '';

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        this.params = args || [];
    }

    _createClass(IrcMessage, [{
        key: 'to1459',
        value: function to1459() {
            var _this = this;

            var parts = [];

            var tags = MessageTags.encode(this.tags);
            if (tags) {
                parts.push('@' + tags);
            }

            if (this.prefix) {
                // TODO: If prefix is empty, build it from the nick!ident@hostname
                parts.push(':' + this.prefix);
            }

            parts.push(this.command);

            if (this.params.length > 0) {
                this.params.forEach(function (param, idx) {
                    if (idx === _this.params.length - 1 && param.indexOf(' ') > -1) {
                        parts.push(':' + param);
                    } else {
                        parts.push(param);
                    }
                });
            }

            return parts.join(' ');
        }
    }, {
        key: 'toJson',
        value: function toJson() {
            return {
                tags: Object.assign({}, this.tags),
                source: this.prefix,
                command: this.command,
                params: this.params
            };
        }
    }]);

    return IrcMessage;
}();